<?php

namespace My\UiBundle\Repository;

use Doctrine\ORM\EntityRepository;
use My\UiBundle\Entity\Item;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
	/**
	 * Find ordered
	 */
	public function findByCategory($category)
	{
		$all = array();
		foreach (array(Item::STATUS_UNWANTED, Item::STATUS_NEW, Item::STATUS_DOWNLOAD) as $status) {
			$qb = $this->getEntityManager()->createQueryBuilder();
			$items = $qb->select('i')
				->from('MyUiBundle:Item', 'i')
				->where('i.category = ?2')->setParameter(2, $category)
				->andWhere('i.status = ?1')->setParameter(1, $status)
				->orderBy((Item::STATUS_NEW ? 'i.createdAt' : 'i.page'), 'ASC')
				->addOrderBy('i.popularity', 'DESC')
				->getQuery()
				->getResult();
			$all = array_merge($all, $items);
		}
		return $all;
	}


	/**
	 * Increments the page
	 */
	public function incrementPage($category, $page)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->update('MyUiBundle:Item', 'i')
			->set('i.page', '?1')->setParameter(1, ($page + 1))
			->where('i.page = ?2')->setParameter(2, $page)
			->andWhere('i.category = ?3')->setParameter(3, $category)
			->getQuery()
			->execute();
	}


	public function findUpdateLast($category, $page)
	{
//		die(var_dump($category));
//		die(var_dump($page));
		$qb = $this->getEntityManager()->createQueryBuilder();
		try {
			return $qb->select($qb->expr()->min('i.updatedAt'))
				->from('MyUiBundle:Item', 'i')
				->where('i.page = ?2')->setParameter(2, $page)
				->andWhere('i.category = ?3')->setParameter(3, $category)
				->orderBy('i.updatedAt', 'ASC')
				->addOrderBy('i.createdAt', 'ASC')
				->getQuery()
				->getSingleScalarResult();
		} catch (\Exception $e) {}
	}


	/**
	 * Find Category's page's average popularity
	 */
	public function findCategoryPagePopularity($category, $page)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		try {
			return $qb->select($qb->expr()->avg('i.popularity'))
				->from('MyUiBundle:Item', 'i')
				->where('i.page = ?2')->setParameter(2, $page)
				->andWhere('i.category = ?3')->setParameter(3, $category)
				->getQuery()
				->getSingleScalarResult();
		} catch (\Exception $e) {}
	}
}
