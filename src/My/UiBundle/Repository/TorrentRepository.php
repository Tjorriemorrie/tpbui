<?php

namespace My\UiBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TorrentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TorrentRepository extends EntityRepository
{
	/**
	 * Gets size
	 */
	public function getSize()
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select($qb->expr()->count('t.id'))->from('My\UiBundle\Entity\Torrent', 't')
			->getQuery()
			->getSingleScalarResult();
	}
	
	
	/**
	 * Gets by category
	 */
	public function getByCategory($id)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('t')->from('My\UiBundle\Entity\Torrent', 't')
			->where('t.category = ?1')->setParameter(1, $id)
			->andWhere($qb->expr()->in('t.status', '?2'))->setParameter(2, array(0, 1))
			->addOrderBy('t.id', 'asc')
			->setMaxResults(5)
			->getQuery()
			->getResult();
	}
	
	
	/**
	 * Gets busy downloading list
	 */
	public function getBusy()
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('t')->from('My\UiBundle\Entity\Torrent', 't')
			->where('t.status = ?1')->setParameter(1, 3)
			->addOrderBy('t.id', 'asc')
			->setMaxResults(10)
			->getQuery()
			->getResult();
	}
	
	
	/**
	 * Gets done downloaded
	 */
	public function getDone()
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('t')->from('My\UiBundle\Entity\Torrent', 't')
			->where('t.status = ?1')->setParameter(1, 5)
			->addOrderBy('t.id', 'desc')
			->setMaxResults(10)
			->getQuery()
			->getResult();
	}
	
	
	/**
	 * Gets bad and unwanted torrents
	 */
	public function getBad()
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('t')->from('My\UiBundle\Entity\Torrent', 't')
			->where($qb->expr()->in('t.status', '?1'))->setParameter(1, array(-1))
			->addOrderBy('t.id', 'desc')
			->setMaxResults(10)
			->getQuery()
			->getResult();
	}
	
	
	/**
	 * Get similars
	 */
	public function getSimilar($torrentName, $torrentId)
	{
		$qrep = str_replace('.', ' ', $torrentName);
		$qsplit = explode(' ', $qrep);
		while (count($qsplit) > 3) array_pop($qsplit);
		$q = implode(' ', $qsplit);
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('t')->from('My\UiBundle\Entity\Torrent', 't')
			->where('t.titleOriginal LIKE ?1')->setParameter(1, $q . '%')
			->andWhere('t.id <> ?2')->setParameter(2, $torrentId)
			->getQuery()
			->getResult();
	}
	
	
	/**
	 * Get Old to delete
	 */
	public function getOld()
	{
		$size = $this->getSize();
		if ($size < 10000) return array();
		else $limit = $size - 10000;
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('t')->from('My\UiBundle\Entity\Torrent', 't')
			->orderBy('t.createdAt', 'asc')
			->setMaxResults($limit)
			->getQuery()
			->getResult();
	}

	
	/**
	 * Get by oldest modified
	 */
	public function getOldest($limit)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		return $qb->select('t')->from('My\UiBundle\Entity\Torrent', 't')
			->orderBy('t.modifiedAt', 'asc')
			->setMaxResults($limit)
			->getQuery()
			->getResult();
	}
}